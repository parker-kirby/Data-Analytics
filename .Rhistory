master[master$days_sinceDose3 < 0, "days_sinceDose2"] <- 600
#Adding a column which gives the number of days since dose 1
master[, ':='(days_sinceDose1 = master$days_sinceDose2 + master$days_dose12interval)]
#Adding a column which gives the number of days since the most recent event
master[, ':='(most_recent_event = pmin(master$days_sinceDose1, master$days_sinceDose2, master$days_sinceDose3, na.rm=TRUE))]
#Setting our originally negative values to zero
master[master$days_sinceDose2 > 599, "days_sinceDose2"] <- 0
master[master$days_sinceDose3 > 599, "days_sinceDose2"] <- 0
#Dealing with NA values in columns that have a positive linear relationship with ic50_omicron, meaning we want NA's to be 0
master$days_sinceDose2[is.na(master$days_sinceDose2)] <- 0
master$days_sinceDose3[is.na(master$days_sinceDose3)] <- 0
#Dealing with NA values in columns that have a flat relationship with ic50_omicron, meaning we want NA's to be the mean
master$days_dose23interval[is.na(master$days_dose23interval)] <- mean(master$days_dose23interval, na.rm = TRUE)
master$Sx_severity_most_recent[is.na(master$Sx_severity_most_recent)] <- mean(master$Sx_severity_most_recent, na.rm = TRUE)
master$days_sinceSxLatest[is.na(master$days_sinceSxLatest)] <- mean(master$days_sinceSxLatest, na.rm = TRUE)
master$days_sincePosTest_latest[is.na(master$days_sincePosTest_latest)] <- mean(master$days_sincePosTest_latest, na.rm = TRUE)
################################################################################################
#Plotted different variables to see the relationship (slope) to ic50_omicron
df<-as.data.frame(master)
#In the following line 'x=' was set to different columns to see the relationships each column had with ic50_omicron
ggplot(data = df, aes(x = dose_2, y = ic50_Omicron)) + geom_point() + geom_smooth(method=lm, se=FALSE)
#Splitting master back into test and train to send over to our model script
train<- (master[master$test == 0])
test<- (master[master$test == 1])
#Dropping our test column used to split after rbind()
drops<- c('test')
train<-train[, !drops, with = FALSE]
test<-test[, !drops, with = FALSE]
fwrite(train,'./project/volume/data/interim/train.csv')
fwrite(test,'./project/volume/data/interim/test.csv')
library(rpart)
library(rpart.plot)
install.packages("rpart.plot")
library(rpart)
library(rpart.plot)
tree <- rpart(data = train)
library(data.table)
library(tidyverse)
library(lubridate)
set.seed(77)
#reading in our raw data
train<-fread('./project/volume/data/raw/Stat_380_train.csv')
test<-fread('./project/volume/data/raw/Stat_380_test.csv')
#Creating a master so that we can makes changes to train and test at the same time
test$ic50_Omicron<-0
train$test<- 0
test$test<- 1
master<- rbind(train, test)
######################################
#Dealing with NA's and adding columns#
######################################
#Changing all negative values in these columns to large numbers so they don't get counted as most recent events
master[master$days_sinceDose2 < 0, "days_sinceDose2"] <- 600
master[master$days_sinceDose3 < 0, "days_sinceDose2"] <- 600
#Adding a column which gives the number of days since dose 1
master[, ':='(days_sinceDose1 = master$days_sinceDose2 + master$days_dose12interval)]
#Adding a column which gives the number of days since the most recent event
master[, ':='(most_recent_event = pmin(master$days_sinceDose1, master$days_sinceDose2, master$days_sinceDose3, na.rm=TRUE))]
#Setting our originally negative values to zero
master[master$days_sinceDose2 > 599, "days_sinceDose2"] <- 0
master[master$days_sinceDose3 > 599, "days_sinceDose2"] <- 0
#Dealing with NA values in columns that have a positive linear relationship with ic50_omicron, meaning we want NA's to be 0
master$days_sinceDose2[is.na(master$days_sinceDose2)] <- 0
master$days_sinceDose3[is.na(master$days_sinceDose3)] <- 0
#Dealing with NA values in columns that have a flat relationship with ic50_omicron, meaning we want NA's to be the mean
master$days_dose23interval[is.na(master$days_dose23interval)] <- mean(master$days_dose23interval, na.rm = TRUE)
master$Sx_severity_most_recent[is.na(master$Sx_severity_most_recent)] <- mean(master$Sx_severity_most_recent, na.rm = TRUE)
master$days_sinceSxLatest[is.na(master$days_sinceSxLatest)] <- mean(master$days_sinceSxLatest, na.rm = TRUE)
master$days_sincePosTest_latest[is.na(master$days_sincePosTest_latest)] <- mean(master$days_sincePosTest_latest, na.rm = TRUE)
################################################################################################
#Plotted different variables to see the relationship (slope) to ic50_omicron
df<-as.data.frame(master)
#In the following line 'x=' was set to different columns to see the relationships each column had with ic50_omicron
ggplot(data = df, aes(x = dose_2, y = ic50_Omicron)) + geom_point() + geom_smooth(method=lm, se=FALSE)
################################################################################################
#Splitting master back into test and train to send over to our model script
train<- (master[master$test == 0])
test<- (master[master$test == 1])
#Dropping our test column used to split after rbind()
drops<- c('test')
train<-train[, !drops, with = FALSE]
test<-test[, !drops, with = FALSE]
fwrite(train,'./project/volume/data/interim/train.csv')
fwrite(test,'./project/volume/data/interim/test.csv')
library(data.table)
library(caret)
library(Metrics)
library(glmnet)
library(plotmo)
library(rpart)
library(rpart.plot)
set.seed(77)
train<-fread('./project/volume/data/interim/train.csv')
test<-fread('./project/volume/data/interim/test.csv')
master_sub<-fread("./project/volume/data/raw/Stat_380_sample_submission.csv")
train
tree <- rpart(ic50_Omicron~., data = train, control = rpart.control(cp = 0.0001))
tree
plot(tree)
plot(tree);text(tree, pretty=2)
plot(tree);text(tree, pretty=1)
plot(tree);text(tree, pretty=4)
plot(tree);text(tree)
plot(tree)
best<- tree$cptable[which.min(tree$cptable[,"xerror"]),"CP"]
best_tree<- prune(tree, cp=best)
plot(best_tree)
best
library(data.table)
library(tidyverse)
library(lubridate)
set.seed(77)
#reading in our raw data
train<-fread('./project/volume/data/raw/Stat_380_train.csv')
test<-fread('./project/volume/data/raw/Stat_380_test.csv')
#Creating a master so that we can makes changes to train and test at the same time
test$ic50_Omicron<-0
train$test<- 0
test$test<- 1
master<- rbind(train, test)
######################################
#Dealing with NA's and adding columns#
######################################
#Changing all negative values in these columns to large numbers so they don't get counted as most recent events
master[master$days_sinceDose2 < 0, "days_sinceDose2"] <- 600
master[master$days_sinceDose3 < 0, "days_sinceDose2"] <- 600
#Adding a column which gives the number of days since dose 1
master[, ':='(days_sinceDose1 = master$days_sinceDose2 + master$days_dose12interval)]
#Adding a column which gives the number of days since the most recent event
master[, ':='(most_recent_event = pmin(master$days_sinceDose1, master$days_sinceDose2, master$days_sinceDose3, na.rm=TRUE))]
#Setting our originally negative values to zero
master[master$days_sinceDose2 > 599, "days_sinceDose2"] <- 0
master[master$days_sinceDose3 > 599, "days_sinceDose2"] <- 0
#Dealing with NA values in columns that have a positive linear relationship with ic50_omicron, meaning we want NA's to be 0
master$days_sinceDose2[is.na(master$days_sinceDose2)] <- 0
master$days_sinceDose3[is.na(master$days_sinceDose3)] <- 0
#Dealing with NA values in columns that have a flat relationship with ic50_omicron, meaning we want NA's to be the mean
master$days_dose23interval[is.na(master$days_dose23interval)] <- mean(master$days_dose23interval, na.rm = TRUE)
master$Sx_severity_most_recent[is.na(master$Sx_severity_most_recent)] <- mean(master$Sx_severity_most_recent, na.rm = TRUE)
master$days_sinceSxLatest[is.na(master$days_sinceSxLatest)] <- mean(master$days_sinceSxLatest, na.rm = TRUE)
master$days_sincePosTest_latest[is.na(master$days_sincePosTest_latest)] <- mean(master$days_sincePosTest_latest, na.rm = TRUE)
################################################################################################
#Plotted different variables to see the relationship (slope) to ic50_omicron
df<-as.data.frame(master)
#In the following line 'x=' was set to different columns to see the relationships each column had with ic50_omicron
ggplot(data = df, aes(x = dose_2, y = ic50_Omicron)) + geom_point() + geom_smooth(method=lm, se=FALSE)
################################################################################################
#Splitting master back into test and train to send over to our model script
train<- (master[master$test == 0])
test<- (master[master$test == 1])
#Dropping our test column used to split after rbind()
drops<- c('test')
train<-train[, !drops, with = FALSE]
test<-test[, !drops, with = FALSE]
fwrite(train,'./project/volume/data/interim/train.csv')
fwrite(test,'./project/volume/data/interim/test.csv')
library(data.table)
library(caret)
library(Metrics)
library(glmnet)
library(plotmo)
library(lubridate)
set.seed(77)
train<-fread('./project/volume/data/interim/train.csv')
test<-fread('./project/volume/data/interim/test.csv')
master_sub<-fread("./project/volume/data/raw/Stat_380_sample_submission.csv")
test$ic50_Omicron<-0
#save the response var because dummyVars will remove
train_A_y<-(train$ic50_Omicron[train$dose_2 == 'AZD1222'])
train_B_y<-(train$ic50_Omicron[train$dose_2 == 'BNT162b2'])
# work with dummies
dummies <- dummyVars(ic50_Omicron ~ ., data = train)
train<-predict(dummies, newdata = train)
test<-predict(dummies, newdata = test)
train<-data.table(train)
test<-data.table(test)
#Splitting the data into two tables based on sex (male and female)
train_A<- (train[train$dose_2AZD1222 == 1])
test_A<- (test[test$dose_2AZD1222 == 1])
train_B<- (train[train$dose_2BNT162b2 == 1])
test_B<- (test[test$dose_2BNT162b2 == 1])
########################
# Use cross validation #
########################
train_A<-as.matrix(train_A)
test_A<-as.matrix(test_A)
train_B<-as.matrix(train_B)
test_B<-as.matrix(test_B)
gl_model_A<-cv.glmnet(train_A, train_A_y, alpha = 1,family="gaussian")
gl_model_B<-cv.glmnet(train_B, train_B_y, alpha = 1,family="gaussian")
bestlam_A<-gl_model_A$lambda.min
bestlam_B<-gl_model_B$lambda.min
####################################
# fit the model to all of the data #
####################################
#now fit the full model
#An alpha value of 0 was tested, but a worse score was acquired so I stuck with alpha = 1
#fit two logistic models divided by sex
gl_model_A<-glmnet(train_A, train_A_y, alpha = 1,family="gaussian")
gl_model_B<-glmnet(train_B, train_B_y, alpha = 1,family="gaussian")
plot_glmnet(gl_Aodel_A)
plot_glmnet(gl_Aodel_B)
#save model
saveRDS(gl_model_A,"./project/volume/models/gl_model_A.model")
saveRDS(gl_model_B,"./project/volume/models/gl_model_B.model")
test_A<-as.matrix(test_A)
test_B<-as.matrix(test_B)
#use the full model
pred_A<-predict(gl_model_A,s=bestlam_A, newx = test_A)
bestlam_A
predict(gl_model_A,s=bestlam_A, newx = test,type="coefficients")
gl_model_A
pred_B<-predict(gl_model_B,s=bestlam_B, newx = test_B)
bestlam_B
predict(gl_model_B,s=bestlam_B, newx = test,type="coefficients")
gl_model_B
#########################
# make a submision file #
#########################
test_A<-data.table(test_A)
pred_A<-data.table(pred_A)
test_B<-data.table(test_B)
pred_B<-data.table(pred_B)
sub_A<- data.table()
sub_A[, ':=' (Id = test_A$Id)]
sub_A[, ':=' (S1 = pred_A$s1)]
sub_B<- data.table()
sub_B[, ':=' (Id = test_B$Id)]
sub_B[, ':=' (S1 = pred_B$s1)]
#We need to create a master that combines our two models
master<- rbind(sub_A ,sub_B)
#we need the rows to be in the correct order
setkey(master,Id)
#our file needs to follow the example submission file format.
master_sub$ic50_Omicron<-master$S1
#now we can write out a submission
fwrite(master_sub,"./project/volume/data/processed/lasso-ridge_model_dose2split.csv")
library(data.table)
library(tidyverse)
library(lubridate)
set.seed(77)
#reading in our raw data
train<-fread('./project/volume/data/raw/Stat_380_train.csv')
test<-fread('./project/volume/data/raw/Stat_380_test.csv')
#Creating a master so that we can makes changes to train and test at the same time
test$ic50_Omicron<-0
train$test<- 0
test$test<- 1
master<- rbind(train, test)
######################################
#Dealing with NA's and adding columns#
######################################
#Changing all negative values in these columns to large numbers so they don't get counted as most recent events
master[master$days_sinceDose2 < 0, "days_sinceDose2"] <- 600
master[master$days_sinceDose3 < 0, "days_sinceDose2"] <- 600
#Adding a column which gives the number of days since dose 1
master[, ':='(days_sinceDose1 = master$days_sinceDose2 + master$days_dose12interval)]
#Adding a column which gives the number of days since the most recent event
master[, ':='(most_recent_event = pmin(master$days_sinceDose1, master$days_sinceDose2, master$days_sinceDose3, na.rm=TRUE))]
#Setting our originally negative values to zero
master[master$days_sinceDose2 > 599, "days_sinceDose2"] <- 0
master[master$days_sinceDose3 > 599, "days_sinceDose2"] <- 0
#Dealing with NA values in columns that have a positive linear relationship with ic50_omicron, meaning we want NA's to be 0
master$days_sinceDose2[is.na(master$days_sinceDose2)] <- 0
master$days_sinceDose3[is.na(master$days_sinceDose3)] <- 0
#Dealing with NA values in columns that have a flat relationship with ic50_omicron, meaning we want NA's to be the mean
master$days_dose23interval[is.na(master$days_dose23interval)] <- mean(master$days_dose23interval, na.rm = TRUE)
master$Sx_severity_most_recent[is.na(master$Sx_severity_most_recent)] <- mean(master$Sx_severity_most_recent, na.rm = TRUE)
master$days_sinceSxLatest[is.na(master$days_sinceSxLatest)] <- mean(master$days_sinceSxLatest, na.rm = TRUE)
master$days_sincePosTest_latest[is.na(master$days_sincePosTest_latest)] <- mean(master$days_sincePosTest_latest, na.rm = TRUE)
################################################################################################
#Plotted different variables to see the relationship (slope) to ic50_omicron
df<-as.data.frame(master)
#In the following line 'x=' was set to different columns to see the relationships each column had with ic50_omicron
ggplot(data = df, aes(x = dose_2, y = ic50_Omicron)) + geom_point() + geom_smooth(method=lm, se=FALSE)
################################################################################################
#Splitting master back into test and train to send over to our model script
train<- (master[master$test == 0])
test<- (master[master$test == 1])
#Dropping our test column used to split after rbind()
drops<- c('test')
train<-train[, !drops, with = FALSE]
test<-test[, !drops, with = FALSE]
fwrite(train,'./project/volume/data/interim/train.csv')
fwrite(test,'./project/volume/data/interim/test.csv')
#save our model
saveRDS(tree, "./project/volume/models/Regression_tree.model")
library(data.table)
library(caret)
library(Metrics)
library(glmnet)
library(plotmo)
library(rpart)
library(rpart.plot)
set.seed(77)
train<-fread('./project/volume/data/interim/train.csv')
test<-fread('./project/volume/data/interim/test.csv')
master_sub<-fread("./project/volume/data/raw/Stat_380_sample_submission.csv")
#Here we are building our regression tree
tree <- rpart(ic50_Omicron~., data = train, control = rpart.control(cp = 0.0001))
#We can see what the tree looks like by plotting it (I did try to add labels but it is a bit too convoluted)
plot(tree)
#save our model
saveRDS(tree, "./project/volume/models/Regression_tree.model")
#predict and form our submission
pred<- predict(tree, newdata = test)
master_sub$ic50_Omicron<-pred
#now we can write out a submission
fwrite(master_sub,"./project/volume/data/processed/Regression_tree_model.csv")
library(data.table)
library(tidyverse)
library(lubridate)
set.seed(77)
#reading in our raw data
train<-fread('./project/volume/data/raw/Stat_380_train.csv')
test<-fread('./project/volume/data/raw/Stat_380_test.csv')
#Creating a master so that we can makes changes to train and test at the same time
test$ic50_Omicron<-0
train$test<- 0
test$test<- 1
master<- rbind(train, test)
######################################
#Dealing with NA's and adding columns#
######################################
#Changing all negative values in these columns to large numbers so they don't get counted as most recent events
master[master$days_sinceDose2 < 0, "days_sinceDose2"] <- 600
master[master$days_sinceDose3 < 0, "days_sinceDose2"] <- 600
#Adding a column which gives the number of days since dose 1
master[, ':='(days_sinceDose1 = master$days_sinceDose2 + master$days_dose12interval)]
#Adding a column which gives the number of days since the most recent event
master[, ':='(most_recent_event = pmin(master$days_sinceDose1, master$days_sinceDose2, master$days_sinceDose3, na.rm=TRUE))]
#Setting our originally negative values to zero
master[master$days_sinceDose2 > 599, "days_sinceDose2"] <- 0
master[master$days_sinceDose3 > 599, "days_sinceDose2"] <- 0
#Dealing with NA values in columns that have a positive linear relationship with ic50_omicron, meaning we want NA's to be 0
master$days_sinceDose2[is.na(master$days_sinceDose2)] <- 0
master$days_sinceDose3[is.na(master$days_sinceDose3)] <- 0
#Dealing with NA values in columns that have a flat relationship with ic50_omicron, meaning we want NA's to be the mean
master$days_dose23interval[is.na(master$days_dose23interval)] <- mean(master$days_dose23interval, na.rm = TRUE)
master$Sx_severity_most_recent[is.na(master$Sx_severity_most_recent)] <- mean(master$Sx_severity_most_recent, na.rm = TRUE)
master$days_sinceSxLatest[is.na(master$days_sinceSxLatest)] <- mean(master$days_sinceSxLatest, na.rm = TRUE)
master$days_sincePosTest_latest[is.na(master$days_sincePosTest_latest)] <- mean(master$days_sincePosTest_latest, na.rm = TRUE)
################################################################################################
#Plotted different variables to see the relationship (slope) to ic50_omicron
df<-as.data.frame(master)
#In the following line 'x=' was set to different columns to see the relationships each column had with ic50_omicron
ggplot(data = df, aes(x = dose_2, y = ic50_Omicron)) + geom_point() + geom_smooth(method=lm, se=FALSE)
################################################################################################
#Splitting master back into test and train to send over to our model script
train<- (master[master$test == 0])
test<- (master[master$test == 1])
#Dropping our test column used to split after rbind()
drops<- c('test')
train<-train[, !drops, with = FALSE]
test<-test[, !drops, with = FALSE]
fwrite(train,'./project/volume/data/interim/train.csv')
fwrite(test,'./project/volume/data/interim/test.csv')
library(data.table)
library(caret)
library(Metrics)
library(glmnet)
library(plotmo)
library(rpart)
library(rpart.plot)
set.seed(77)
train<-fread('./project/volume/data/interim/train.csv')
test<-fread('./project/volume/data/interim/test.csv')
master_sub<-fread("./project/volume/data/raw/Stat_380_sample_submission.csv")
#Here we are building our regression tree
tree <- rpart(ic50_Omicron~., data = train, control = rpart.control(cp = 0.0001))
#We can see what the tree looks like by plotting it (I did try to add labels but it is a bit too convoluted)
plot(tree)
#save our model
saveRDS(tree, "./project/volume/models/Regression_tree.model")
#predict and form our submission
pred<- predict(tree, newdata = test)
master_sub$ic50_Omicron<-pred
master_sub
View(master_sub)
#now we can write out a submission
fwrite(master_sub,"./project/volume/data/processed/Regression_tree_model.csv")
library(data.table)
library(dplyr)
set.seed(77)
#Read in our data for our tsne + xgboost model to make predictions
test_emb<-fread('./project/volume/data/raw/test_emb.csv')
training_emb<-fread('./project/volume/data/raw/training_emb.csv')
test_file<-fread('./project/volume/data/raw/test_file.csv')
training_data<-fread('./project/volume/data/raw/training_data.csv')
example_sub<-fread('./project/volume/data/raw/examp_sub.csv')
####################################################################
#Combining our 2 test and 2 train files into just 1 test and 1 train
train<-cbind(training_data, training_emb)
train$testtrain<-1
#Change our reddit column to a numerical representation
train$reddit[train$reddit == 'cars'] <- 0
train$reddit[train$reddit == 'CFB'] <- 1
train$reddit[train$reddit == 'Cooking'] <- 2
train$reddit[train$reddit == 'MachineLearning'] <- 3
train$reddit[train$reddit == 'magicTCG'] <- 4
train$reddit[train$reddit == 'politics'] <- 5
train$reddit[train$reddit == 'RealEstate'] <- 6
train$reddit[train$reddit == 'science'] <- 7
train$reddit[train$reddit == 'StockMarket'] <- 8
train$reddit[train$reddit == 'travel'] <- 9
train$reddit[train$reddit == 'videogames'] <- 10
test<-cbind(test_file, test_emb)
test$testtrain<-0
test$reddit<-99
####################################################################
#Combining our test and train files into one master dataset
master<-rbind(train, test, fill=TRUE)
master$id<-1:nrow(master)
#write out our master data and example_sub
fwrite(master,'./project/volume/data/interim/master.csv')
fwrite(example_sub,'./project/volume/data/interim/example_sub.csv')
library(data.table)
library(Rtsne)
library(ggplot2)
library(caret)
library(ClusterR)
set.seed(3)
# load in master data
master<-fread("./project/volume/data/interim/master.csv")
###############################################
#Taking out columns that won't be used for tsne
id<-master$id
master$id<-NULL
testtrain<-master$testtrain
master$testtrain<-NULL
text<-master$text
master$text<-NULL
reddit<-master$reddit
master$reddit<-NULL
#obtain our tsne model with pca = true
tsne<-Rtsne(master,pca = T,perplexity=10,check_duplicates = F)
setwd("~/IAPP/Data-Analytics")
library(data.table)
library(dplyr)
library(carat)
#read in our data
data <- fread('./UNH_Membership_Project/project/volume/data/raw/raw_data.csv')
#removing records that won't be used for analysis
data <- distinct(data)
data <- data[data$`Account Record Type` == "Individual"]
data <- data[data$`Membership Category` == "Individual"]
data <- data[data$Status == "Active"]
data <- data[data$`Member Type` != "Individual Green Membership"]
data <- data[data$`Member Type` != "Press"]
data <- data[data$`Product: Record Type` != "Donation"]
data <- data[data$`Product: Record Type` != "Coupon"]
#Converting date formats and specifying our date range
data$`Created Date`<- as.Date(data$`Created Date`, "%m/%d/%Y")
data$`Transaction Date` <- as.Date(data$`Transaction Date`, "%m/%d/%Y")
data <- data[data$`Transaction Date` < as.Date('2022-01-01')]
#removing columns that aren't important
remove <- c("OTP", "Designation", "Default Country", "Product: Category", "Product: Short Name", "Account Safe Id",
"Account Safe Id-1", "Account Record Type-1", "Member-1", "Member Type-1", "Status",
"Person Account: Lead Source", "Certified", "Member")
data <- data[, remove:=NULL, with=FALSE]
#writing out our cleaned data
fwrite(data, './UNH_Membership_Project/project/volume/data/interim/cleaned_data.csv')
data <- fread('./UNH_Membership_Project/project/volume/data/intrim/cleaned_data.csv')
#Defining columns for the different types of membership
data$direct <- 0
data$OTP_indirect <- 0
data$bundle_indirect <- 0
data$comp_indirect <-0
#Direct membership
data_list <- data[(duplicated(data$`Order Id`) | duplicated(data$`Order Id`, fromLast = TRUE)) & data$`Unit Price` == 0]
direct_list = c("Professional", "Not-For-Profit", "Government", "Higher Education", "Retired", "Transitional", "Student")
#data$direct[data$`Product: Product Name` %in% direct_list & data$`Unit Price` > 0 & data$`Total Payment` >= data$`Unit Price`] <- 1
data1 <- data[data$`Product: Product Name` %in% direct_list & data$`Unit Price` > 0 & data$`Total Payment` >= data$`Unit Price`]
#Get rid of records in data list
non_use = c(data_list$`Order Id`)
'%notin%' <- Negate('%in%')
data2 <- data1[data1$`Order Id` %notin% non_use]
data3 <- data2[duplicated(data2$`Order Id`)]
test_indirect <- data[(duplicated(data$`Order Id`) | duplicated(data$`Order Id`, fromLast = TRUE)) & data$`Unit Price` == 0 & data$`Total Payment` == 0]
View(test_indirect)
data_2 <- data[data$`Order Id` == "Order 0144579"]
View(data_2)
free_memberships <- data[data$`Product: Product Name` %in% membership_list & data$`Unit Price` == 0 & data$`Total Payment` == 0]
membership_list = c("Professional", "Not-For-Profit", "Government", "Higher Education", "Retired", "Transitional", "Student")
#data$direct[data$`Product: Product Name` %in% direct_list & data$`Unit Price` > 0 & data$`Total Payment` >= data$`Unit Price`] <- 1
data1 <- data[data$`Product: Product Name` %in% membership_list & data$`Unit Price` > 0 & data$`Total Payment` >= data$`Unit Price`]
free_memberships <- data[data$`Product: Product Name` %in% membership_list & data$`Unit Price` == 0 & data$`Total Payment` == 0]
View(free_memberships)
data_2 <- data[data$`Order Id` == "Order 0263479"]
View(data_2)
test_indirect <- data[(duplicated(data$`Order Id`) | duplicated(data$`Order Id`, fromLast = TRUE)) & data$`Unit Price` == 0 & data$`Total Payment` == 0]
Final_OTP <- data[free_memberships$`Order Id` %in% test_indirect]
Final_OTP <- data[free_memberships$`Order Id` %in% test_indirect$`Order Id`]
Final_OTP <- data[test_indirect$`Order Id` %in% free_memberships$`Order Id`]
Final_OTP <- data[test_indirect$`Order Id` %in% free_memberships]
Final_OTP <- test_indirect[test_indirect$`Order Id` %in% free_memberships]
View(Final_OTP)
Final_OTP <- test_indirect[test_indirect$`Order Id` %in% free_memberships$`Order Id`]
View(Final_OTP)
OTP <- Final_OTP[Final_OTP$`Product: Product Name` %in% membership_list]
View(OTP)
data_2 <- data[data$`Order Id` == "Order 0601119"]
View(data_2)
View(free_memberships)
free_memberships <- data[data$`Product: Product Name` %in% membership_list & data$`Unit Price` == 0 & data$`Total Payment` >= 0]
View(free_memberships)
free_memberships <- data[data$`Product: Product Name` %in% membership_list & data$`Unit Price` == 0 & data$`Total Payment` > 0]
View(free_memberships)
data_2 <- data[data$`Order Id` == "Order 0335908"]
View(data_2)
View(data3)
View(data2)
