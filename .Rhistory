<<<<<<< Updated upstream
#############################################################################################################
#############################################################################################################
#############################################################################################################
##########################################################################################################
#Direct membership
data_list <- data[(duplicated(data$`Order Id`) | duplicated(data$`Order Id`, fromLast = TRUE)) & data$`Unit Price` == 0]
#data$direct[data$`Product: Product Name` %in% direct_list & data$`Unit Price` > 0 & data$`Total Payment` >= data$`Unit Price`] <- 1
direct <- data[data$`Product: Product Name` %in% membership_list & data$`Unit Price` > 0 & data$`Total Payment` >= data$`Unit Price`]
#Get rid of records in data list
non_use = c(data_list$`Order Id`)
Final_Direct <- direct[direct$`Order Id` %notin% non_use]
Final_Direct <- Final_Direct[!(duplicated(Final_Direct$`Order Id`))]
Final_Direct <- rbind(Final_Direct, Weird_Directs)
Final_Direct <- Final_Direct[!(duplicated(Final_Direct$`Order Id`))]
direct2 <- data[data$`Product: Product Name` %in% membership_list & !(duplicated(data$`Order Id`) | duplicated(data$`Order Id`, fromLast = TRUE))
& data$`Total Payment` < data$`Unit Price` & data$`Total Payment` != 0]
Final_Direct <- rbind(Final_Direct, direct2)
Final_Direct <- Final_Direct[!(duplicated(Final_Direct$`Order Id`))]
##########################################################################################################
#Indirect OTP
OTP_indirect1 <- data[(duplicated(data$`Order Id`) | duplicated(data$`Order Id`, fromLast = TRUE)) & data$`Unit Price` == 0 & data$`Total Payment` == 0]
Final_OTP <- OTP_indirect1[OTP_indirect1$`Product: Product Name` %in% membership_list]
Final_OTP <- rbind(Final_OTP, Weird_OTPs)
Final_OTP <- Final_OTP[!(duplicated(Final_OTP$`Order Id`))]
#########################################################################################################
#Indirect Comp
comped1 <- data[data$`Product: Product Name` %in% membership_list & data$`Unit Price` > 0 & data$`Total Payment` == 0]
comped2 <- data[data$`Product: Product Name` %in% membership_list & data$`Unit Price` == 0 & data$`Total Payment` == 0 & !(duplicated(data$`Order Id`) | duplicated(data$`Order Id`, fromLast = TRUE))]
Final_Comp<- rbind(comped1, comped2)
Final_Comp[Final_Comp$`Order Id` == "Order 0055506"]
#########################################################################################################
#Indirect Bundle
bundle1 <- data[data$`Product: Product Name` %in% membership_list & (duplicated(data$`Order Id`) | duplicated(data$`Order Id`, fromLast = TRUE)) & data$`Unit Price` == 0 & data$`Total Payment` > 0]
bundle2 <- data[data$`Product: Product Name` %in% membership_list & (duplicated(data$`Order Id`) | duplicated(data$`Order Id`, fromLast = TRUE)) & data$`Unit Price`> 0 & data$`Total Payment`> 0 & data$`Unit Price` <= data$`Total Payment`]
bundle2 <- bundle2[bundle2$`Order Id` %in% non_use]
findem1 <- Weird_OTPs$`Order Id`
findem2 <- Weird_Directs$`Order Id`
notinbundle2 <- bundle2[!(bundle2$`Order Id` %in% findem1 | bundle2$`Order Id` %in% findem2)]
Final_Bundle <- rbind(bundle1, notinbundle2)
Final_Bundle <- Final_Bundle[(!(duplicated(Final_Bundle$`Order Id`)))]
canwefindem <- bind_rows(Final_Direct, Final_OTP, Final_Comp, Final_Bundle)
listed5 <- canwefindem$`Order Id`
here <- kindasus[kindasus$`Order Id` %notin% listed5]
Final_Comp <- rbind(Final_Comp, here)
#Write out our final tables
fwrite(Final_Direct, './UNH_Membership_Project/project/volume/data/processed/Final_Direct.csv')
fwrite(Final_OTP, './UNH_Membership_Project/project/volume/data/processed/Final_OTP.csv')
fwrite(Final_Comp, './UNH_Membership_Project/project/volume/data/processed/Final_Comp.csv')
fwrite(Final_Bundle, './UNH_Membership_Project/project/volume/data/processed/Final_Bundle.csv')
Final_Direct <- fread('./UNH_Membership_Project/project/volume/data/processed/Final_Direct.csv')
Final_OTP <- fread('./UNH_Membership_Project/project/volume/data/processed/Final_OTP.csv')
Final_Comp <- fread('./UNH_Membership_Project/project/volume/data/processed/Final_Comp.csv')
Final_Bundle <- fread('./UNH_Membership_Project/project/volume/data/processed/Final_Bundle.csv')
Final_Direct$num <- 1
Final_OTP$num <- 2
Final_Comp$num <- 3
Final_Bundle$num <- 4
#Adding year of transaction to Final_Direct
Final_Direct$year[Final_Direct$`Transaction Date` >= as.Date('2016-01-01') & Final_Direct$`Transaction Date` <= as.Date('2016-12-31')] <- "2016"
Final_Direct$year[Final_Direct$`Transaction Date` >= as.Date('2017-01-01') & Final_Direct$`Transaction Date` <= as.Date('2017-12-31')] <- "2017"
Final_Direct$year[Final_Direct$`Transaction Date` >= as.Date('2018-01-01') & Final_Direct$`Transaction Date` <= as.Date('2018-12-31')] <- "2018"
Final_Direct$year[Final_Direct$`Transaction Date` >= as.Date('2019-01-01') & Final_Direct$`Transaction Date` <= as.Date('2019-12-31')] <- "2019"
Final_Direct$year[Final_Direct$`Transaction Date` >= as.Date('2020-01-01') & Final_Direct$`Transaction Date` <= as.Date('2020-12-31')] <- "2020"
Final_Direct$year[Final_Direct$`Transaction Date` >= as.Date('2021-01-01') & Final_Direct$`Transaction Date` <= as.Date('2021-12-31')] <- "2021"
#Adding year of transaction to Final_OTP
Final_OTP$year[Final_OTP$`Transaction Date` >= as.Date('2016-01-01') & Final_OTP$`Transaction Date` <= as.Date('2016-12-31')] <- "2016"
Final_OTP$year[Final_OTP$`Transaction Date` >= as.Date('2017-01-01') & Final_OTP$`Transaction Date` <= as.Date('2017-12-31')] <- "2017"
Final_OTP$year[Final_OTP$`Transaction Date` >= as.Date('2018-01-01') & Final_OTP$`Transaction Date` <= as.Date('2018-12-31')] <- "2018"
Final_OTP$year[Final_OTP$`Transaction Date` >= as.Date('2019-01-01') & Final_OTP$`Transaction Date` <= as.Date('2019-12-31')] <- "2019"
Final_OTP$year[Final_OTP$`Transaction Date` >= as.Date('2020-01-01') & Final_OTP$`Transaction Date` <= as.Date('2020-12-31')] <- "2020"
Final_OTP$year[Final_OTP$`Transaction Date` >= as.Date('2021-01-01') & Final_OTP$`Transaction Date` <= as.Date('2021-12-31')] <- "2021"
#Adding year of transaction to Final_Comp
Final_Comp$year[Final_Comp$`Transaction Date` >= as.Date('2016-01-01') & Final_Comp$`Transaction Date` <= as.Date('2016-12-31')] <- "2016"
Final_Comp$year[Final_Comp$`Transaction Date` >= as.Date('2017-01-01') & Final_Comp$`Transaction Date` <= as.Date('2017-12-31')] <- "2017"
Final_Comp$year[Final_Comp$`Transaction Date` >= as.Date('2018-01-01') & Final_Comp$`Transaction Date` <= as.Date('2018-12-31')] <- "2018"
Final_Comp$year[Final_Comp$`Transaction Date` >= as.Date('2019-01-01') & Final_Comp$`Transaction Date` <= as.Date('2019-12-31')] <- "2019"
Final_Comp$year[Final_Comp$`Transaction Date` >= as.Date('2020-01-01') & Final_Comp$`Transaction Date` <= as.Date('2020-12-31')] <- "2020"
Final_Comp$year[Final_Comp$`Transaction Date` >= as.Date('2021-01-01') & Final_Comp$`Transaction Date` <= as.Date('2021-12-31')] <- "2021"
#Adding year of transaction to Final_Bundle
Final_Bundle$year[Final_Bundle$`Transaction Date` >= as.Date('2016-01-01') & Final_Bundle$`Transaction Date` <= as.Date('2016-12-31')] <- "2016"
Final_Bundle$year[Final_Bundle$`Transaction Date` >= as.Date('2017-01-01') & Final_Bundle$`Transaction Date` <= as.Date('2017-12-31')] <- "2017"
Final_Bundle$year[Final_Bundle$`Transaction Date` >= as.Date('2018-01-01') & Final_Bundle$`Transaction Date` <= as.Date('2018-12-31')] <- "2018"
Final_Bundle$year[Final_Bundle$`Transaction Date` >= as.Date('2019-01-01') & Final_Bundle$`Transaction Date` <= as.Date('2019-12-31')] <- "2019"
Final_Bundle$year[Final_Bundle$`Transaction Date` >= as.Date('2020-01-01') & Final_Bundle$`Transaction Date` <= as.Date('2020-12-31')] <- "2020"
Final_Bundle$year[Final_Bundle$`Transaction Date` >= as.Date('2021-01-01') & Final_Bundle$`Transaction Date` <= as.Date('2021-12-31')] <- "2021"
#if account ID and year of record is the same, then only keep record with lower Order ID number
#trying to fix the problem where a customer bought multiple memberships in a year
merged <- bind_rows(Final_Direct, Final_OTP, Final_Comp, Final_Bundle)
merged[merged$`Order Id` == "Order 0613650"]
merged[merged$`Order Id` == "Order 1149890"]
merged[merged$`Order Id` == "Order 1272700"]
#read in our data
data <- fread('./UNH_Membership_Project/project/volume/data/raw/raw_data.csv')
unique(data$`Membership Status`)
#read in our data
data <- fread('./UNH_Membership_Project/project/volume/data/raw/raw_data.csv')
#read in our data
data <- fread('./UNH_Membership_Project/project/volume/data/raw/raw_data.csv')
#removing records that won't be used for analysis
data <- distinct(data)
data <- data[data$`Account Record Type` == "Individual"]
data <- data[data$`Membership Category` == "Individual"]
data <- data[data$Status == "Active"]
data <- data[data$`Member Type` == "Individual Green Membership" & data$`Unit Price` > 0 & data$`Total Payment` == 0]
data <- data[data$`Member Type` != "Press"]
data <- data[data$`Product: Record Type` != "Donation"]
data <- data[data$`Product: Record Type` != "Coupon"]
data <- data[!(data$`Product: Category` == "Book" & data$`Unit Price` == 0)]
data <- data[!(data$`Product: Category` == "ebook" & data$`Unit Price` == 0)]
data <- data[!(data$`Product: Category` == "White Paper" & data$`Unit Price` == 0)]
#Converting date formats and specifying our date range
data$`Created Date`<- as.Date(data$`Created Date`, "%m/%d/%Y")
data$`Transaction Date` <- as.Date(data$`Transaction Date`, "%m/%d/%Y")
data <- data[data$`Transaction Date` < as.Date('2022-01-01')]
#removing columns that aren't important
remove <- c("OTP", "Designation", "Default Country", "Product: Short Name", "Account Safe Id",
"Account Safe Id-1", "Account Record Type-1", "Member-1", "Member Type-1", "Status",
"Person Account: Lead Source", "Certified", "Member", "Product: Category")
data <- data[, remove:=NULL, with=FALSE]
#read in our data
data <- fread('./UNH_Membership_Project/project/volume/data/raw/raw_data.csv')
View(comped2)
#removing records that won't be used for analysis
data <- distinct(data)
data <- data[data$`Account Record Type` == "Individual"]
data <- data[data$`Membership Category` == "Individual"]
data <- data[data$Status == "Active"]
data <- data[data$`Member Type` != "Press"]
data <- data[data$`Product: Record Type` != "Donation"]
data <- data[data$`Product: Record Type` != "Coupon"]
data <- data[!(data$`Product: Category` == "Book" & data$`Unit Price` == 0)]
data <- data[!(data$`Product: Category` == "ebook" & data$`Unit Price` == 0)]
data <- data[!(data$`Product: Category` == "White Paper" & data$`Unit Price` == 0)]
#Converting date formats and specifying our date range
data$`Created Date`<- as.Date(data$`Created Date`, "%m/%d/%Y")
data$`Transaction Date` <- as.Date(data$`Transaction Date`, "%m/%d/%Y")
data <- data[data$`Transaction Date` < as.Date('2022-01-01')]
#removing columns that aren't important
remove <- c("OTP", "Designation", "Default Country", "Product: Short Name", "Account Safe Id",
"Account Safe Id-1", "Account Record Type-1", "Member-1", "Member Type-1", "Status",
"Person Account: Lead Source", "Certified", "Member", "Product: Category")
data <- data[, remove:=NULL, with=FALSE]
#read in our data
data <- fread('./UNH_Membership_Project/project/volume/data/raw/raw_data.csv')
#removing records that won't be used for analysis
data <- distinct(data)
data <- data[data$`Account Record Type` == "Individual"]
data <- data[data$`Membership Category` == "Individual"]
data <- data[data$Status == "Active"]
data <- data[data$`Member Type` != "Press"]
data <- data[data$`Product: Record Type` != "Donation"]
data <- data[data$`Product: Record Type` != "Coupon"]
data <- data[!(data$`Product: Category` == "Book" & data$`Unit Price` == 0)]
data <- data[!(data$`Product: Category` == "ebook" & data$`Unit Price` == 0)]
data <- data[!(data$`Product: Category` == "White Paper" & data$`Unit Price` == 0)]
#Converting date formats and specifying our date range
data$`Created Date`<- as.Date(data$`Created Date`, "%m/%d/%Y")
data$`Transaction Date` <- as.Date(data$`Transaction Date`, "%m/%d/%Y")
data <- data[data$`Transaction Date` < as.Date('2022-01-01')]
#removing columns that aren't important
remove <- c( "Product: Short Name", "Account Safe Id",
"Account Safe Id-1", "Status",
"Certified", "Member", "Product: Category")
data <- data[, remove:=NULL, with=FALSE]
#writing out our cleaned data
fwrite(data, './UNH_Membership_Project/project/volume/data/interim/cleaned_data.csv')
data <- fread('./UNH_Membership_Project/project/volume/data/interim/cleaned_data.csv')
membership_list = c("Professional", "Not-For-Profit", "Government", "Higher Education", "Retired", "Transitional", "Student")
kindasus <- data[data$`Product: Product Name` %in% membership_list]
kindasus <- kindasus[!duplicated(kindasus$`Order Id`)]
'%notin%' <- Negate('%in%')
strange1 <- data[data$`Product: Product Name` %in% membership_list & (duplicated(data$`Order Id`) | duplicated(data$`Order Id`, fromLast = TRUE)) & data$`Unit Price`> 0]
strange2 <- data[(duplicated(data$`Order Id`) | duplicated(data$`Order Id`, fromLast = TRUE)) & data$`Unit Price` == 0 & data$`Product: Product Name` %notin% membership_list & data$`Total Payment` > 0]
orderup <- rbind(strange1, strange2)
orderup <- orderup[(duplicated(orderup$`Order Id`) | duplicated(orderup$`Order Id`, fromLast = TRUE))]
listed <- orderup$`Order Id`[orderup$`Product: Product Name` %in% membership_list]
orderup <- orderup[orderup$`Order Id` %in% listed]
listed2 <- orderup$`Order Id`[orderup$`Unit Price` == 0]
orderup <- orderup[orderup$`Order Id` %in% listed2]
listed3 <- orderup$`Order Id`[orderup$`Product: Product Name` == "CIPP/E Test Center Exam (First-Time Candidate)" | orderup$`Product: Product Name` == "CIPM Test Center Exam (First-Time Candidate)"
| orderup$`Product: Product Name` == "CIPT Test Center Exam (First-Time Candidate)" | orderup$`Product: Product Name` == "CIPP/US Test Center Exam (First-Time Candidate)"
| orderup$`Product: Product Name` == "CIPP/E Test Center Exam (First-Time Candidate)" | orderup$`Product: Product Name` == "CIPP/E Test Center Exam (Retake)"]
Weird_OTPs <- orderup[orderup$`Order Id` %in% listed3]
Weird_OTPs <- Weird_OTPs[Weird_OTPs$`Unit Price` == Weird_OTPs$`Total Payment`]
listed4 <- Weird_OTPs$`Order Id`
Weird_Directs <- orderup[orderup$`Order Id` %notin% listed4]
Weird_Directs <- Weird_Directs[Weird_Directs$`Product: Product Name` %in% membership_list]
##########################################################################################################
#Direct membership
data_list <- data[(duplicated(data$`Order Id`) | duplicated(data$`Order Id`, fromLast = TRUE)) & data$`Unit Price` == 0]
#data$direct[data$`Product: Product Name` %in% direct_list & data$`Unit Price` > 0 & data$`Total Payment` >= data$`Unit Price`] <- 1
direct <- data[data$`Product: Product Name` %in% membership_list & data$`Unit Price` > 0 & data$`Total Payment` >= data$`Unit Price`]
#Get rid of records in data list
non_use = c(data_list$`Order Id`)
Final_Direct <- direct[direct$`Order Id` %notin% non_use]
Final_Direct <- Final_Direct[!(duplicated(Final_Direct$`Order Id`))]
Final_Direct <- rbind(Final_Direct, Weird_Directs)
Final_Direct <- Final_Direct[!(duplicated(Final_Direct$`Order Id`))]
direct2 <- data[data$`Product: Product Name` %in% membership_list & !(duplicated(data$`Order Id`) | duplicated(data$`Order Id`, fromLast = TRUE))
& data$`Total Payment` < data$`Unit Price` & data$`Total Payment` != 0]
Final_Direct <- rbind(Final_Direct, direct2)
Final_Direct <- Final_Direct[!(duplicated(Final_Direct$`Order Id`))]
OTP_indirect1 <- data[(duplicated(data$`Order Id`) | duplicated(data$`Order Id`, fromLast = TRUE)) & data$`Unit Price` == 0 & data$`Total Payment` == 0]
Final_OTP <- OTP_indirect1[OTP_indirect1$`Product: Product Name` %in% membership_list]
Final_OTP <- rbind(Final_OTP, Weird_OTPs)
Final_OTP <- Final_OTP[!(duplicated(Final_OTP$`Order Id`))]
#########################################################################################################
#Indirect Comp
comped1 <- data[data$`Product: Product Name` %in% membership_list & data$`Unit Price` > 0 & data$`Total Payment` == 0]
comped2 <- data[data$`Product: Product Name` %in% membership_list & data$`Unit Price` == 0 & data$`Total Payment` == 0 & !(duplicated(data$`Order Id`) | duplicated(data$`Order Id`, fromLast = TRUE))]
Final_Comp<- rbind(comped1, comped2)
Final_Comp[Final_Comp$`Order Id` == "Order 0055506"]
bundle1 <- data[data$`Product: Product Name` %in% membership_list & (duplicated(data$`Order Id`) | duplicated(data$`Order Id`, fromLast = TRUE)) & data$`Unit Price` == 0 & data$`Total Payment` > 0]
bundle2 <- data[data$`Product: Product Name` %in% membership_list & (duplicated(data$`Order Id`) | duplicated(data$`Order Id`, fromLast = TRUE)) & data$`Unit Price`> 0 & data$`Total Payment`> 0 & data$`Unit Price` <= data$`Total Payment`]
bundle2 <- bundle2[bundle2$`Order Id` %in% non_use]
findem1 <- Weird_OTPs$`Order Id`
findem2 <- Weird_Directs$`Order Id`
notinbundle2 <- bundle2[!(bundle2$`Order Id` %in% findem1 | bundle2$`Order Id` %in% findem2)]
Final_Bundle <- rbind(bundle1, notinbundle2)
Final_Bundle <- Final_Bundle[(!(duplicated(Final_Bundle$`Order Id`)))]
canwefindem <- bind_rows(Final_Direct, Final_OTP, Final_Comp, Final_Bundle)
listed5 <- canwefindem$`Order Id`
here <- kindasus[kindasus$`Order Id` %notin% listed5]
Final_Comp <- rbind(Final_Comp, here)
#Write out our final tables
fwrite(Final_Direct, './UNH_Membership_Project/project/volume/data/processed/Final_Direct.csv')
fwrite(Final_OTP, './UNH_Membership_Project/project/volume/data/processed/Final_OTP.csv')
fwrite(Final_Comp, './UNH_Membership_Project/project/volume/data/processed/Final_Comp.csv')
fwrite(Final_Bundle, './UNH_Membership_Project/project/volume/data/processed/Final_Bundle.csv')
Final_Direct <- fread('./UNH_Membership_Project/project/volume/data/processed/Final_Direct.csv')
Final_OTP <- fread('./UNH_Membership_Project/project/volume/data/processed/Final_OTP.csv')
Final_Comp <- fread('./UNH_Membership_Project/project/volume/data/processed/Final_Comp.csv')
Final_Bundle <- fread('./UNH_Membership_Project/project/volume/data/processed/Final_Bundle.csv')
Final_Direct$num <- 1
Final_OTP$num <- 2
Final_Comp$num <- 3
Final_Bundle$num <- 4
#Adding year of transaction to Final_Direct
Final_Direct$year[Final_Direct$`Transaction Date` >= as.Date('2016-01-01') & Final_Direct$`Transaction Date` <= as.Date('2016-12-31')] <- "2016"
Final_Direct$year[Final_Direct$`Transaction Date` >= as.Date('2017-01-01') & Final_Direct$`Transaction Date` <= as.Date('2017-12-31')] <- "2017"
Final_Direct$year[Final_Direct$`Transaction Date` >= as.Date('2018-01-01') & Final_Direct$`Transaction Date` <= as.Date('2018-12-31')] <- "2018"
Final_Direct$year[Final_Direct$`Transaction Date` >= as.Date('2019-01-01') & Final_Direct$`Transaction Date` <= as.Date('2019-12-31')] <- "2019"
Final_Direct$year[Final_Direct$`Transaction Date` >= as.Date('2020-01-01') & Final_Direct$`Transaction Date` <= as.Date('2020-12-31')] <- "2020"
Final_Direct$year[Final_Direct$`Transaction Date` >= as.Date('2021-01-01') & Final_Direct$`Transaction Date` <= as.Date('2021-12-31')] <- "2021"
#Adding year of transaction to Final_OTP
Final_OTP$year[Final_OTP$`Transaction Date` >= as.Date('2016-01-01') & Final_OTP$`Transaction Date` <= as.Date('2016-12-31')] <- "2016"
Final_OTP$year[Final_OTP$`Transaction Date` >= as.Date('2017-01-01') & Final_OTP$`Transaction Date` <= as.Date('2017-12-31')] <- "2017"
Final_OTP$year[Final_OTP$`Transaction Date` >= as.Date('2018-01-01') & Final_OTP$`Transaction Date` <= as.Date('2018-12-31')] <- "2018"
Final_OTP$year[Final_OTP$`Transaction Date` >= as.Date('2019-01-01') & Final_OTP$`Transaction Date` <= as.Date('2019-12-31')] <- "2019"
Final_OTP$year[Final_OTP$`Transaction Date` >= as.Date('2020-01-01') & Final_OTP$`Transaction Date` <= as.Date('2020-12-31')] <- "2020"
Final_OTP$year[Final_OTP$`Transaction Date` >= as.Date('2021-01-01') & Final_OTP$`Transaction Date` <= as.Date('2021-12-31')] <- "2021"
#Adding year of transaction to Final_Comp
Final_Comp$year[Final_Comp$`Transaction Date` >= as.Date('2016-01-01') & Final_Comp$`Transaction Date` <= as.Date('2016-12-31')] <- "2016"
Final_Comp$year[Final_Comp$`Transaction Date` >= as.Date('2017-01-01') & Final_Comp$`Transaction Date` <= as.Date('2017-12-31')] <- "2017"
Final_Comp$year[Final_Comp$`Transaction Date` >= as.Date('2018-01-01') & Final_Comp$`Transaction Date` <= as.Date('2018-12-31')] <- "2018"
Final_Comp$year[Final_Comp$`Transaction Date` >= as.Date('2019-01-01') & Final_Comp$`Transaction Date` <= as.Date('2019-12-31')] <- "2019"
Final_Comp$year[Final_Comp$`Transaction Date` >= as.Date('2020-01-01') & Final_Comp$`Transaction Date` <= as.Date('2020-12-31')] <- "2020"
Final_Comp$year[Final_Comp$`Transaction Date` >= as.Date('2021-01-01') & Final_Comp$`Transaction Date` <= as.Date('2021-12-31')] <- "2021"
#Adding year of transaction to Final_Bundle
Final_Bundle$year[Final_Bundle$`Transaction Date` >= as.Date('2016-01-01') & Final_Bundle$`Transaction Date` <= as.Date('2016-12-31')] <- "2016"
Final_Bundle$year[Final_Bundle$`Transaction Date` >= as.Date('2017-01-01') & Final_Bundle$`Transaction Date` <= as.Date('2017-12-31')] <- "2017"
Final_Bundle$year[Final_Bundle$`Transaction Date` >= as.Date('2018-01-01') & Final_Bundle$`Transaction Date` <= as.Date('2018-12-31')] <- "2018"
Final_Bundle$year[Final_Bundle$`Transaction Date` >= as.Date('2019-01-01') & Final_Bundle$`Transaction Date` <= as.Date('2019-12-31')] <- "2019"
Final_Bundle$year[Final_Bundle$`Transaction Date` >= as.Date('2020-01-01') & Final_Bundle$`Transaction Date` <= as.Date('2020-12-31')] <- "2020"
Final_Bundle$year[Final_Bundle$`Transaction Date` >= as.Date('2021-01-01') & Final_Bundle$`Transaction Date` <= as.Date('2021-12-31')] <- "2021"
#if account ID and year of record is the same, then only keep record with lower Order ID number
#trying to fix the problem where a customer bought multiple memberships in a year
merged <- bind_rows(Final_Direct, Final_OTP, Final_Comp, Final_Bundle)
merged[merged$`Order Id` == "Order 1272700"]
setorder(merged, cols = `Order Id`)
merged <- as.data.frame(merged)
merged <- merged[!duplicated(merged[c('Unique ID', 'year')]),]
merged <- as.data.table(merged)
merged$year<- as.numeric(merged$year)
#Separate table back into Direct, OTP, Comp, or Bundle
Final_Direct <- merged[merged$num == 1]
Final_OTP <- merged[merged$num == 2]
Final_Comp <- merged[merged$num == 3]
Final_Bundle <- merged[merged$num == 4]
Final_Direct <- Final_Direct[, 'num':=NULL]
Final_OTP <- Final_OTP[, 'num':=NULL]
Final_Comp <- Final_Comp[, 'num':=NULL]
Final_Bundle <- Final_Bundle[, 'num':=NULL]
##############
#Direct Yearly
Direct_yearly = dcast(Final_Direct, `Unique ID` ~ year)
Direct_yearly <- Direct_yearly[,"NA":=NULL]
for(j in 2:ncol(Direct_yearly)){
set(Direct_yearly, i= which(Direct_yearly[[j]]!=0), j=j, value =1)
}
###########
#OTP Yearly
OTP_yearly = dcast(Final_OTP, `Unique ID` ~ year)
OTP_yearly <- OTP_yearly[,"NA":=NULL]
for(j in 2:ncol(OTP_yearly)){
set(OTP_yearly, i= which(OTP_yearly[[j]]!=0), j=j, value =2)
}
Total_yearly<-rbind(Direct_yearly, OTP_yearly)
############
#Comp Yearly
Comp_yearly = dcast(Final_Comp, `Unique ID` ~ year)
Comp_yearly <- Comp_yearly[,"NA":=NULL]
for(j in 2:ncol(Comp_yearly)){
set(Comp_yearly, i= which(Comp_yearly[[j]]!=0), j=j, value =3)
}
Total_yearly<-rbind(Total_yearly, Comp_yearly)
##############
#Bundle Yearly
Bundle_yearly = dcast(Final_Bundle, `Unique ID` ~ year)
Bundle_yearly <- Bundle_yearly[,"NA":=NULL]
for(j in 2:ncol(Bundle_yearly)){
set(Bundle_yearly, i= which(Bundle_yearly[[j]]!=0), j=j, value =4)
}
Total_yearly<-rbind(Total_yearly, Bundle_yearly)
#Creating Total_yearly which holds all information about when each customer bought membership and what type of membership the bought
#(direct, OTP, Comp, or Bundle)
Total_yearly[is.na(Total_yearly)] <- 0
Total_yearly <- Total_yearly[,.(`2016`=sum(`2016`), `2017`=sum(`2017`), `2018`=sum(`2018`), `2019`=sum(`2019`), `2020`=sum(`2020`), `2021`=sum(`2021`)), `Unique ID`]
fwrite(Total_yearly, './UNH_Membership_Project/project/volume/data/processed/Total_yearly.csv')
Total_yearly <- fread('./UNH_Membership_Project/project/volume/data/processed/Total_yearly.csv')
######################################################
#General Rate
general_members_2016 <- sum(Total_yearly$`2016` > 0)
general_members_2017 <- sum(Total_yearly$`2017` > 0)
general_members_2018 <- sum(Total_yearly$`2018` > 0)
general_members_2019 <- sum(Total_yearly$`2019` > 0)
general_members_2020 <- sum(Total_yearly$`2020` > 0)
general_members_2021 <- sum(Total_yearly$`2021` > 0)
general_retention_2017 <- sum(Total_yearly$`2016` > 0 & Total_yearly$`2017` > 0)
general_retention_2018 <- sum(Total_yearly$`2017` > 0 & Total_yearly$`2018` > 0)
general_retention_2019 <- sum(Total_yearly$`2018` > 0 & Total_yearly$`2019` > 0)
general_retention_2020 <- sum(Total_yearly$`2019` > 0 & Total_yearly$`2020` > 0)
general_retention_2021 <- sum(Total_yearly$`2020` > 0 & Total_yearly$`2021` > 0)
general_rates <- as.data.table(((general_retention_2017/general_members_2016) * 100))
colnames(general_rates) <- "2017 Rate"
general_rates$`2018 Rate` <- ((general_retention_2018/general_members_2017) * 100)
general_rates$`2019 Rate` <- ((general_retention_2019/general_members_2018) * 100)
general_rates$`2020 Rate` <- ((general_retention_2020/general_members_2019) * 100)
general_rates$`2021 Rate` <- ((general_retention_2021/general_members_2020) * 100)
######################################################
#Direct Rate
Direct_members_2016 <- sum(Total_yearly$`2016` == 1)
Direct_members_2017 <- sum(Total_yearly$`2017` == 1)
Direct_members_2018 <- sum(Total_yearly$`2018` == 1)
Direct_members_2019 <- sum(Total_yearly$`2019` == 1)
Direct_members_2020 <- sum(Total_yearly$`2020` == 1)
Direct_members_2021 <- sum(Total_yearly$`2021` == 1)
Direct_retention_2017 <- sum(Total_yearly$`2016` == 1 & Total_yearly$`2017` > 0)
Direct_retention_2018 <- sum(Total_yearly$`2017` == 1 & Total_yearly$`2018` > 0)
Direct_retention_2019 <- sum(Total_yearly$`2018` == 1 & Total_yearly$`2019` > 0)
Direct_retention_2020 <- sum(Total_yearly$`2019` == 1 & Total_yearly$`2020` > 0)
Direct_retention_2021 <- sum(Total_yearly$`2020` == 1 & Total_yearly$`2021` > 0)
Direct_rates <- as.data.table(((Direct_retention_2017/Direct_members_2016) * 100))
colnames(Direct_rates) <- "2017 Rate"
Direct_rates$`2018 Rate` <- ((Direct_retention_2018/Direct_members_2017) * 100)
Direct_rates$`2019 Rate` <- ((Direct_retention_2019/Direct_members_2018) * 100)
Direct_rates$`2020 Rate` <- ((Direct_retention_2020/Direct_members_2019) * 100)
Direct_rates$`2021 Rate` <- ((Direct_retention_2021/Direct_members_2020) * 100)
######################################################
#OTP Rate
OTP_members_2016 <- sum(Total_yearly$`2016` == 2)
OTP_members_2017 <- sum(Total_yearly$`2017` == 2)
OTP_members_2018 <- sum(Total_yearly$`2018` == 2)
OTP_members_2019 <- sum(Total_yearly$`2019` == 2)
OTP_members_2020 <- sum(Total_yearly$`2020` == 2)
OTP_members_2021 <- sum(Total_yearly$`2021` == 2)
OTP_retention_2017 <- sum(Total_yearly$`2016` == 2 & Total_yearly$`2017` > 0)
OTP_retention_2018 <- sum(Total_yearly$`2017` == 2 & Total_yearly$`2018` > 0)
OTP_retention_2019 <- sum(Total_yearly$`2018` == 2 & Total_yearly$`2019` > 0)
OTP_retention_2020 <- sum(Total_yearly$`2019` == 2 & Total_yearly$`2020` > 0)
OTP_retention_2021 <- sum(Total_yearly$`2020` == 2 & Total_yearly$`2021` > 0)
OTP_rates <- as.data.table(((OTP_retention_2017/OTP_members_2016) * 100))
colnames(OTP_rates) <- "2017 Rate"
OTP_rates$`2018 Rate` <- ((OTP_retention_2018/OTP_members_2017) * 100)
OTP_rates$`2019 Rate` <- ((OTP_retention_2019/OTP_members_2018) * 100)
OTP_rates$`2020 Rate` <- ((OTP_retention_2020/OTP_members_2019) * 100)
OTP_rates$`2021 Rate` <- ((OTP_retention_2021/OTP_members_2020) * 100)
######################################################
#Comp Rate
Comp_members_2016 <- sum(Total_yearly$`2016` == 3)
Comp_members_2017 <- sum(Total_yearly$`2017` == 3)
Comp_members_2018 <- sum(Total_yearly$`2018` == 3)
Comp_members_2019 <- sum(Total_yearly$`2019` == 3)
Comp_members_2020 <- sum(Total_yearly$`2020` == 3)
Comp_members_2021 <- sum(Total_yearly$`2021` == 3)
Comp_retention_2017 <- sum(Total_yearly$`2016` == 3 & Total_yearly$`2017` > 0)
Comp_retention_2018 <- sum(Total_yearly$`2017` == 3 & Total_yearly$`2018` > 0)
Comp_retention_2019 <- sum(Total_yearly$`2018` == 3 & Total_yearly$`2019` > 0)
Comp_retention_2020 <- sum(Total_yearly$`2019` == 3 & Total_yearly$`2020` > 0)
Comp_retention_2021 <- sum(Total_yearly$`2020` == 3 & Total_yearly$`2021` > 0)
Comp_rates <- as.data.table(((Comp_retention_2017/Comp_members_2016) * 100))
colnames(Comp_rates) <- "2017 Rate"
Comp_rates$`2018 Rate` <- ((Comp_retention_2018/Comp_members_2017) * 100)
Comp_rates$`2019 Rate` <- ((Comp_retention_2019/Comp_members_2018) * 100)
Comp_rates$`2020 Rate` <- ((Comp_retention_2020/Comp_members_2019) * 100)
Comp_rates$`2021 Rate` <- ((Comp_retention_2021/Comp_members_2020) * 100)
######################################################
#Bundle Rate
Bundle_members_2016 <- sum(Total_yearly$`2016` == 4)
Bundle_members_2017 <- sum(Total_yearly$`2017` == 4)
Bundle_members_2018 <- sum(Total_yearly$`2018` == 4)
Bundle_members_2019 <- sum(Total_yearly$`2019` == 4)
Bundle_members_2020 <- sum(Total_yearly$`2020` == 4)
Bundle_members_2021 <- sum(Total_yearly$`2021` == 4)
Bundle_retention_2017 <- sum(Total_yearly$`2016` == 4 & Total_yearly$`2017` > 0)
Bundle_retention_2018 <- sum(Total_yearly$`2017` == 4 & Total_yearly$`2018` > 0)
Bundle_retention_2019 <- sum(Total_yearly$`2018` == 4 & Total_yearly$`2019` > 0)
Bundle_retention_2020 <- sum(Total_yearly$`2019` == 4 & Total_yearly$`2020` > 0)
Bundle_retention_2021 <- sum(Total_yearly$`2020` == 4 & Total_yearly$`2021` > 0)
Bundle_rates <- as.data.table(((Bundle_retention_2017/Bundle_members_2016) * 100))
colnames(Bundle_rates) <- "2017 Rate"
Bundle_rates$`2018 Rate` <- ((Bundle_retention_2018/Bundle_members_2017) * 100)
Bundle_rates$`2019 Rate` <- ((Bundle_retention_2019/Bundle_members_2018) * 100)
Bundle_rates$`2020 Rate` <- ((Bundle_retention_2020/Bundle_members_2019) * 100)
Bundle_rates$`2021 Rate` <- ((Bundle_retention_2021/Bundle_members_2020) * 100)
##################
#Final Rates Table
rates <- bind_rows(general_rates, Direct_rates, OTP_rates, Comp_rates, Bundle_rates)
rates <- as.data.frame(rates)
rownames(rates) <- c("General", "Direct", "OTP", "Comp", "Bundle")
fwrite(rates, './UNH_Membership_Project/project/volume/data/processed/rates.csv')
######################
#Direct member numbers
Direct_members <- as.data.table((Direct_members_2017/general_members_2017) *100)
colnames(Direct_members) <- "2017 Member%"
Direct_members$`2018 Member%` <- ((Direct_members_2018/general_members_2018) *100)
Direct_members$`2019 Member%` <- ((Direct_members_2019/general_members_2019) *100)
Direct_members$`2020 Member%` <- ((Direct_members_2020/general_members_2020) *100)
Direct_members$`2021 Member%` <- ((Direct_members_2021/general_members_2021) *100)
######################
#OTP member numbers
OTP_members <- as.data.table((OTP_members_2017/general_members_2017) *100)
colnames(OTP_members) <- "2017 Member%"
OTP_members$`2018 Member%` <- ((OTP_members_2018/general_members_2018) *100)
OTP_members$`2019 Member%` <- ((OTP_members_2019/general_members_2019) *100)
OTP_members$`2020 Member%` <- ((OTP_members_2020/general_members_2020) *100)
OTP_members$`2021 Member%` <- ((OTP_members_2021/general_members_2021) *100)
#####################
#Comp member numbers
Comp_members <- as.data.table((Comp_members_2017/general_members_2017) *100)
colnames(Comp_members) <- "2017 Member%"
Comp_members$`2018 Member%` <- ((Comp_members_2018/general_members_2018) *100)
Comp_members$`2019 Member%` <- ((Comp_members_2019/general_members_2019) *100)
Comp_members$`2020 Member%` <- ((Comp_members_2020/general_members_2020) *100)
Comp_members$`2021 Member%` <- ((Comp_members_2021/general_members_2021) *100)
######################
#Bundle member numbers
Bundle_members <- as.data.table((Bundle_members_2017/general_members_2017) *100)
colnames(Bundle_members) <- "2017 Member%"
Bundle_members$`2018 Member%` <- ((Bundle_members_2018/general_members_2018) *100)
Bundle_members$`2019 Member%` <- ((Bundle_members_2019/general_members_2019) *100)
Bundle_members$`2020 Member%` <- ((Bundle_members_2020/general_members_2020) *100)
Bundle_members$`2021 Member%` <- ((Bundle_members_2021/general_members_2021) *100)
###################
#Membership numbers
members <- bind_rows(Direct_members, OTP_members, Comp_members, Bundle_members)
members <- as.data.frame(members)
rownames(members) <- c("Direct", "OTP", "Comp", "Bundle")
fwrite(members, './UNH_Membership_Project/project/volume/data/processed/members.csv')
library(ggplot2)
library(tidyr)
rates <- fread('./UNH_Membership_Project/project/volume/data/processed/rates.csv')
members <- fread('./UNH_Membership_Project/project/volume/data/processed/members.csv')
rownames(rates) <- c("General", "Direct", "OTP", "Comp", "Bundle")
names <- rownames(rates)
rownames(rates) <- NULL
rates <- cbind(names, rates)
rates <- rates[-1, ]
data <- gather(rates, type, value, -names)
ggplot(data, aes(reorder(names, -value), value, fill = names)) +
geom_bar(stat = "identity", width = 0.85, color = "black", position = "dodge") +
scale_fill_brewer(palette = "Set2") +
theme() +
ylim(0, 100) +
xlab("Year") +
ylab("Retention Rate") +
theme(axis.text.x = element_text(angle = 65, vjust = 0.6, hjust=0.5, size = 12)) +
facet_grid(~type) +
geom_text(aes(label=round(value, digits = 1)), size = 4, position=position_dodge(width=0.9), vjust=-0.5)
merged[merged$`Order Id` == "Order 1336141"]
data_1 <- data[data$`Order Id` == "Order 1336141"]
#read in our data
data <- fread('./UNH_Membership_Project/project/volume/data/raw/raw_data.csv')
#removing records that won't be used for analysis
data <- distinct(data)
data <- data[data$`Account Record Type` == "Individual"]
data <- data[data$`Membership Category` == "Individual"]
data <- data[data$Status == "Active"]
data <- data[data$`Member Type` != "Press"]
data <- data[data$`Product: Record Type` != "Donation"]
data <- data[data$`Product: Record Type` != "Coupon"]
data <- data[!(data$`Product: Category` == "Book" & data$`Unit Price` == 0)]
data <- data[!(data$`Product: Category` == "ebook" & data$`Unit Price` == 0)]
data <- data[!(data$`Product: Category` == "White Paper" & data$`Unit Price` == 0)]
#Converting date formats and specifying our date range
data$`Created Date`<- as.Date(data$`Created Date`, "%m/%d/%Y")
data$`Transaction Date` <- as.Date(data$`Transaction Date`, "%m/%d/%Y")
data <- data[data$`Transaction Date` < as.Date('2022-01-01')]
#removing columns that aren't important
remove <- c( "Product: Short Name", "Account Safe Id",
"Account Safe Id-1", "Status",
"Certified", "Member", "Product: Category")
data <- data[, remove:=NULL, with=FALSE]
data_1 <- data[data$`Order Id` == "Order 1336141"]
View(data_1)
#read in our data
data <- fread('./UNH_Membership_Project/project/volume/data/raw/raw_data.csv')
View(data)
#read in our data
data <- fread('./UNH_Membership_Project/project/volume/data/raw/raw_data.csv')
data_4 <- data[data$`Account Safe Id` == "0011P00001CO2w0QAD"]
View(data_4)
=======
library(randomForest)
library(randomForest)
install.packages("randomForest")
library(caTools)
library(randomForest)
install.packages("randomForest")
install.packages("Rtools")
install.packages("randomForest)
install.packages("randomForest)
install.packages("randomForest)
v
install.packages("randomForest)
install.packages("randomForest")
install.packages("randomForest")
PATH="${RTOOLS40_HOME}\usr\bin;${PATH}"
write('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', file = "~/.Renviron", append = TRUE)
write('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', file = "~/.Renviron", append = TRUE)
Sys.which("make")
install.packages("randomForest")
library(caTools)
install.packages("randomForest")
library(randomForest)
install.packages('randomForest')
library(data.table)
library(caret)
library(Metrics)
library(glmnet)
library(plotmo)
library(caTools)
library(randomForest)
library(data.table)
library(caret)
library(Metrics)
library(glmnet)
library(plotmo)
library(caTools)
library(randomForest)
install.packages('randomForest')
library(data.table)
library(tidyverse)
library(lubridate)
set.seed(77)
#reading in our raw data
train<-fread('./project/volume/data/raw/Stat_380_train.csv')
test<-fread('./project/volume/data/raw/Stat_380_test.csv')
#Creating a master so that we can makes changes to train and test at the same time
test$ic50_Omicron<-0
train$test<- 0
test$test<- 1
master<- rbind(train, test)
#Changing all negative values in these columns to large numbers so they don't get counted as most recent events
master[master$days_sinceDose2 < 0, "days_sinceDose2"] <- 600
master[master$days_sinceDose3 < 0, "days_sinceDose2"] <- 600
set.seed(77)
#reading in our raw data
train<-fread('./project/volume/data/raw/Stat_380_train.csv')
test<-fread('./project/volume/data/raw/Stat_380_test.csv')
#Creating a master so that we can makes changes to train and test at the same time
test$ic50_Omicron<-0
setwd("~/STAT_380/Projects/Covid_Vax_Project")
library(data.table)
library(tidyverse)
library(lubridate)
set.seed(77)
#reading in our raw data
train<-fread('./project/volume/data/raw/Stat_380_train.csv')
test<-fread('./project/volume/data/raw/Stat_380_test.csv')
#Creating a master so that we can makes changes to train and test at the same time
test$ic50_Omicron<-0
train$test<- 0
test$test<- 1
master<- rbind(train, test)
#Changing all negative values in these columns to large numbers so they don't get counted as most recent events
master[master$days_sinceDose2 < 0, "days_sinceDose2"] <- 600
master[master$days_sinceDose3 < 0, "days_sinceDose2"] <- 600
#Adding a column which gives the number of days since dose 1
master[, ':='(days_sinceDose1 = master$days_sinceDose2 + master$days_dose12interval)]
#Adding a column which gives the number of days since the most recent event
master[, ':='(most_recent_event = pmin(master$days_sinceDose1, master$days_sinceDose2, master$days_sinceDose3, na.rm=TRUE))]
#Setting our originally negative values to zero
master[master$days_sinceDose2 > 599, "days_sinceDose2"] <- 0
master[master$days_sinceDose3 > 599, "days_sinceDose2"] <- 0
#Dealing with NA values in columns that have a positive linear relationship with ic50_omicron, meaning we want NA's to be 0
master$days_sinceDose2[is.na(master$days_sinceDose2)] <- 0
master$days_sinceDose3[is.na(master$days_sinceDose3)] <- 0
#Dealing with NA values in columns that have a flat relationship with ic50_omicron, meaning we want NA's to be the mean
master$days_dose23interval[is.na(master$days_dose23interval)] <- mean(master$days_dose23interval, na.rm = TRUE)
master$Sx_severity_most_recent[is.na(master$Sx_severity_most_recent)] <- mean(master$Sx_severity_most_recent, na.rm = TRUE)
master$days_sinceSxLatest[is.na(master$days_sinceSxLatest)] <- mean(master$days_sinceSxLatest, na.rm = TRUE)
master$days_sincePosTest_latest[is.na(master$days_sincePosTest_latest)] <- mean(master$days_sincePosTest_latest, na.rm = TRUE)
################################################################################################
#Plotted different variables to see the relationship (slope) to ic50_omicron
df<-as.data.frame(master)
#In the following line 'x=' was set to different columns to see the relationships each column had with ic50_omicron
ggplot(data = df, aes(x = dose_2, y = ic50_Omicron)) + geom_point() + geom_smooth(method=lm, se=FALSE)
#Splitting master back into test and train to send over to our model script
train<- (master[master$test == 0])
test<- (master[master$test == 1])
#Dropping our test column used to split after rbind()
drops<- c('test')
train<-train[, !drops, with = FALSE]
test<-test[, !drops, with = FALSE]
fwrite(train,'./project/volume/data/interim/train.csv')
fwrite(test,'./project/volume/data/interim/test.csv')
library(rpart)
library(rpart.plot)
install.packages("rpart.plot")
library(rpart)
library(rpart.plot)
tree <- rpart(data = train)
library(data.table)
library(tidyverse)
library(lubridate)
set.seed(77)
#reading in our raw data
train<-fread('./project/volume/data/raw/Stat_380_train.csv')
test<-fread('./project/volume/data/raw/Stat_380_test.csv')
#Creating a master so that we can makes changes to train and test at the same time
test$ic50_Omicron<-0
train$test<- 0
test$test<- 1
master<- rbind(train, test)
######################################
#Dealing with NA's and adding columns#
######################################
#Changing all negative values in these columns to large numbers so they don't get counted as most recent events
master[master$days_sinceDose2 < 0, "days_sinceDose2"] <- 600
master[master$days_sinceDose3 < 0, "days_sinceDose2"] <- 600
#Adding a column which gives the number of days since dose 1
master[, ':='(days_sinceDose1 = master$days_sinceDose2 + master$days_dose12interval)]
#Adding a column which gives the number of days since the most recent event
master[, ':='(most_recent_event = pmin(master$days_sinceDose1, master$days_sinceDose2, master$days_sinceDose3, na.rm=TRUE))]
#Setting our originally negative values to zero
master[master$days_sinceDose2 > 599, "days_sinceDose2"] <- 0
master[master$days_sinceDose3 > 599, "days_sinceDose2"] <- 0
#Dealing with NA values in columns that have a positive linear relationship with ic50_omicron, meaning we want NA's to be 0
master$days_sinceDose2[is.na(master$days_sinceDose2)] <- 0
master$days_sinceDose3[is.na(master$days_sinceDose3)] <- 0
#Dealing with NA values in columns that have a flat relationship with ic50_omicron, meaning we want NA's to be the mean
master$days_dose23interval[is.na(master$days_dose23interval)] <- mean(master$days_dose23interval, na.rm = TRUE)
master$Sx_severity_most_recent[is.na(master$Sx_severity_most_recent)] <- mean(master$Sx_severity_most_recent, na.rm = TRUE)
master$days_sinceSxLatest[is.na(master$days_sinceSxLatest)] <- mean(master$days_sinceSxLatest, na.rm = TRUE)
master$days_sincePosTest_latest[is.na(master$days_sincePosTest_latest)] <- mean(master$days_sincePosTest_latest, na.rm = TRUE)
################################################################################################
#Plotted different variables to see the relationship (slope) to ic50_omicron
df<-as.data.frame(master)
#In the following line 'x=' was set to different columns to see the relationships each column had with ic50_omicron
ggplot(data = df, aes(x = dose_2, y = ic50_Omicron)) + geom_point() + geom_smooth(method=lm, se=FALSE)
################################################################################################
#Splitting master back into test and train to send over to our model script
train<- (master[master$test == 0])
test<- (master[master$test == 1])
#Dropping our test column used to split after rbind()
drops<- c('test')
train<-train[, !drops, with = FALSE]
test<-test[, !drops, with = FALSE]
fwrite(train,'./project/volume/data/interim/train.csv')
fwrite(test,'./project/volume/data/interim/test.csv')
library(data.table)
library(caret)
library(Metrics)
library(glmnet)
library(plotmo)
library(rpart)
library(rpart.plot)
set.seed(77)
train<-fread('./project/volume/data/interim/train.csv')
test<-fread('./project/volume/data/interim/test.csv')
master_sub<-fread("./project/volume/data/raw/Stat_380_sample_submission.csv")
train
tree <- rpart(ic50_Omicron~., data = train, control = rpart.control(cp = 0.0001))
tree
plot(tree)
plot(tree);text(tree, pretty=2)
plot(tree);text(tree, pretty=1)
plot(tree);text(tree, pretty=4)
plot(tree);text(tree)
plot(tree)
best<- tree$cptable[which.min(tree$cptable[,"xerror"]),"CP"]
best_tree<- prune(tree, cp=best)
plot(best_tree)
best
library(data.table)
library(tidyverse)
library(lubridate)
set.seed(77)
#reading in our raw data
train<-fread('./project/volume/data/raw/Stat_380_train.csv')
test<-fread('./project/volume/data/raw/Stat_380_test.csv')
#Creating a master so that we can makes changes to train and test at the same time
test$ic50_Omicron<-0
train$test<- 0
test$test<- 1
master<- rbind(train, test)
######################################
#Dealing with NA's and adding columns#
######################################
#Changing all negative values in these columns to large numbers so they don't get counted as most recent events
master[master$days_sinceDose2 < 0, "days_sinceDose2"] <- 600
master[master$days_sinceDose3 < 0, "days_sinceDose2"] <- 600
#Adding a column which gives the number of days since dose 1
master[, ':='(days_sinceDose1 = master$days_sinceDose2 + master$days_dose12interval)]
#Adding a column which gives the number of days since the most recent event
master[, ':='(most_recent_event = pmin(master$days_sinceDose1, master$days_sinceDose2, master$days_sinceDose3, na.rm=TRUE))]
#Setting our originally negative values to zero
master[master$days_sinceDose2 > 599, "days_sinceDose2"] <- 0
master[master$days_sinceDose3 > 599, "days_sinceDose2"] <- 0
#Dealing with NA values in columns that have a positive linear relationship with ic50_omicron, meaning we want NA's to be 0
master$days_sinceDose2[is.na(master$days_sinceDose2)] <- 0
master$days_sinceDose3[is.na(master$days_sinceDose3)] <- 0
#Dealing with NA values in columns that have a flat relationship with ic50_omicron, meaning we want NA's to be the mean
master$days_dose23interval[is.na(master$days_dose23interval)] <- mean(master$days_dose23interval, na.rm = TRUE)
master$Sx_severity_most_recent[is.na(master$Sx_severity_most_recent)] <- mean(master$Sx_severity_most_recent, na.rm = TRUE)
master$days_sinceSxLatest[is.na(master$days_sinceSxLatest)] <- mean(master$days_sinceSxLatest, na.rm = TRUE)
master$days_sincePosTest_latest[is.na(master$days_sincePosTest_latest)] <- mean(master$days_sincePosTest_latest, na.rm = TRUE)
################################################################################################
#Plotted different variables to see the relationship (slope) to ic50_omicron
df<-as.data.frame(master)
#In the following line 'x=' was set to different columns to see the relationships each column had with ic50_omicron
ggplot(data = df, aes(x = dose_2, y = ic50_Omicron)) + geom_point() + geom_smooth(method=lm, se=FALSE)
################################################################################################
#Splitting master back into test and train to send over to our model script
train<- (master[master$test == 0])
test<- (master[master$test == 1])
#Dropping our test column used to split after rbind()
drops<- c('test')
train<-train[, !drops, with = FALSE]
test<-test[, !drops, with = FALSE]
fwrite(train,'./project/volume/data/interim/train.csv')
fwrite(test,'./project/volume/data/interim/test.csv')
library(data.table)
library(caret)
library(Metrics)
library(glmnet)
library(plotmo)
library(lubridate)
set.seed(77)
train<-fread('./project/volume/data/interim/train.csv')
test<-fread('./project/volume/data/interim/test.csv')
master_sub<-fread("./project/volume/data/raw/Stat_380_sample_submission.csv")
test$ic50_Omicron<-0
#save the response var because dummyVars will remove
train_A_y<-(train$ic50_Omicron[train$dose_2 == 'AZD1222'])
train_B_y<-(train$ic50_Omicron[train$dose_2 == 'BNT162b2'])
# work with dummies
dummies <- dummyVars(ic50_Omicron ~ ., data = train)
train<-predict(dummies, newdata = train)
test<-predict(dummies, newdata = test)
train<-data.table(train)
test<-data.table(test)
#Splitting the data into two tables based on sex (male and female)
train_A<- (train[train$dose_2AZD1222 == 1])
test_A<- (test[test$dose_2AZD1222 == 1])
train_B<- (train[train$dose_2BNT162b2 == 1])
test_B<- (test[test$dose_2BNT162b2 == 1])
########################
# Use cross validation #
########################
train_A<-as.matrix(train_A)
test_A<-as.matrix(test_A)
train_B<-as.matrix(train_B)
test_B<-as.matrix(test_B)
gl_model_A<-cv.glmnet(train_A, train_A_y, alpha = 1,family="gaussian")
gl_model_B<-cv.glmnet(train_B, train_B_y, alpha = 1,family="gaussian")
bestlam_A<-gl_model_A$lambda.min
bestlam_B<-gl_model_B$lambda.min
####################################
# fit the model to all of the data #
####################################
#now fit the full model
#An alpha value of 0 was tested, but a worse score was acquired so I stuck with alpha = 1
#fit two logistic models divided by sex
gl_model_A<-glmnet(train_A, train_A_y, alpha = 1,family="gaussian")
gl_model_B<-glmnet(train_B, train_B_y, alpha = 1,family="gaussian")
plot_glmnet(gl_Aodel_A)
plot_glmnet(gl_Aodel_B)
#save model
saveRDS(gl_model_A,"./project/volume/models/gl_model_A.model")
saveRDS(gl_model_B,"./project/volume/models/gl_model_B.model")
test_A<-as.matrix(test_A)
test_B<-as.matrix(test_B)
#use the full model
pred_A<-predict(gl_model_A,s=bestlam_A, newx = test_A)
bestlam_A
predict(gl_model_A,s=bestlam_A, newx = test,type="coefficients")
gl_model_A
pred_B<-predict(gl_model_B,s=bestlam_B, newx = test_B)
bestlam_B
predict(gl_model_B,s=bestlam_B, newx = test,type="coefficients")
gl_model_B
#########################
# make a submision file #
#########################
test_A<-data.table(test_A)
pred_A<-data.table(pred_A)
test_B<-data.table(test_B)
pred_B<-data.table(pred_B)
sub_A<- data.table()
sub_A[, ':=' (Id = test_A$Id)]
sub_A[, ':=' (S1 = pred_A$s1)]
sub_B<- data.table()
sub_B[, ':=' (Id = test_B$Id)]
sub_B[, ':=' (S1 = pred_B$s1)]
#We need to create a master that combines our two models
master<- rbind(sub_A ,sub_B)
#we need the rows to be in the correct order
setkey(master,Id)
#our file needs to follow the example submission file format.
master_sub$ic50_Omicron<-master$S1
#now we can write out a submission
fwrite(master_sub,"./project/volume/data/processed/lasso-ridge_model_dose2split.csv")
library(data.table)
library(tidyverse)
library(lubridate)
set.seed(77)
#reading in our raw data
train<-fread('./project/volume/data/raw/Stat_380_train.csv')
test<-fread('./project/volume/data/raw/Stat_380_test.csv')
#Creating a master so that we can makes changes to train and test at the same time
test$ic50_Omicron<-0
train$test<- 0
test$test<- 1
master<- rbind(train, test)
######################################
#Dealing with NA's and adding columns#
######################################
#Changing all negative values in these columns to large numbers so they don't get counted as most recent events
master[master$days_sinceDose2 < 0, "days_sinceDose2"] <- 600
master[master$days_sinceDose3 < 0, "days_sinceDose2"] <- 600
#Adding a column which gives the number of days since dose 1
master[, ':='(days_sinceDose1 = master$days_sinceDose2 + master$days_dose12interval)]
#Adding a column which gives the number of days since the most recent event
master[, ':='(most_recent_event = pmin(master$days_sinceDose1, master$days_sinceDose2, master$days_sinceDose3, na.rm=TRUE))]
#Setting our originally negative values to zero
master[master$days_sinceDose2 > 599, "days_sinceDose2"] <- 0
master[master$days_sinceDose3 > 599, "days_sinceDose2"] <- 0
#Dealing with NA values in columns that have a positive linear relationship with ic50_omicron, meaning we want NA's to be 0
master$days_sinceDose2[is.na(master$days_sinceDose2)] <- 0
master$days_sinceDose3[is.na(master$days_sinceDose3)] <- 0
#Dealing with NA values in columns that have a flat relationship with ic50_omicron, meaning we want NA's to be the mean
master$days_dose23interval[is.na(master$days_dose23interval)] <- mean(master$days_dose23interval, na.rm = TRUE)
master$Sx_severity_most_recent[is.na(master$Sx_severity_most_recent)] <- mean(master$Sx_severity_most_recent, na.rm = TRUE)
master$days_sinceSxLatest[is.na(master$days_sinceSxLatest)] <- mean(master$days_sinceSxLatest, na.rm = TRUE)
master$days_sincePosTest_latest[is.na(master$days_sincePosTest_latest)] <- mean(master$days_sincePosTest_latest, na.rm = TRUE)
################################################################################################
#Plotted different variables to see the relationship (slope) to ic50_omicron
df<-as.data.frame(master)
#In the following line 'x=' was set to different columns to see the relationships each column had with ic50_omicron
ggplot(data = df, aes(x = dose_2, y = ic50_Omicron)) + geom_point() + geom_smooth(method=lm, se=FALSE)
################################################################################################
#Splitting master back into test and train to send over to our model script
train<- (master[master$test == 0])
test<- (master[master$test == 1])
#Dropping our test column used to split after rbind()
drops<- c('test')
train<-train[, !drops, with = FALSE]
test<-test[, !drops, with = FALSE]
fwrite(train,'./project/volume/data/interim/train.csv')
fwrite(test,'./project/volume/data/interim/test.csv')
#save our model
saveRDS(tree, "./project/volume/models/Regression_tree.model")
library(data.table)
library(caret)
library(Metrics)
library(glmnet)
library(plotmo)
library(rpart)
library(rpart.plot)
set.seed(77)
train<-fread('./project/volume/data/interim/train.csv')
test<-fread('./project/volume/data/interim/test.csv')
master_sub<-fread("./project/volume/data/raw/Stat_380_sample_submission.csv")
#Here we are building our regression tree
tree <- rpart(ic50_Omicron~., data = train, control = rpart.control(cp = 0.0001))
#We can see what the tree looks like by plotting it (I did try to add labels but it is a bit too convoluted)
plot(tree)
#save our model
saveRDS(tree, "./project/volume/models/Regression_tree.model")
#predict and form our submission
pred<- predict(tree, newdata = test)
master_sub$ic50_Omicron<-pred
#now we can write out a submission
fwrite(master_sub,"./project/volume/data/processed/Regression_tree_model.csv")
library(data.table)
library(tidyverse)
library(lubridate)
set.seed(77)
#reading in our raw data
train<-fread('./project/volume/data/raw/Stat_380_train.csv')
test<-fread('./project/volume/data/raw/Stat_380_test.csv')
#Creating a master so that we can makes changes to train and test at the same time
test$ic50_Omicron<-0
train$test<- 0
test$test<- 1
master<- rbind(train, test)
######################################
#Dealing with NA's and adding columns#
######################################
#Changing all negative values in these columns to large numbers so they don't get counted as most recent events
master[master$days_sinceDose2 < 0, "days_sinceDose2"] <- 600
master[master$days_sinceDose3 < 0, "days_sinceDose2"] <- 600
#Adding a column which gives the number of days since dose 1
master[, ':='(days_sinceDose1 = master$days_sinceDose2 + master$days_dose12interval)]
#Adding a column which gives the number of days since the most recent event
master[, ':='(most_recent_event = pmin(master$days_sinceDose1, master$days_sinceDose2, master$days_sinceDose3, na.rm=TRUE))]
#Setting our originally negative values to zero
master[master$days_sinceDose2 > 599, "days_sinceDose2"] <- 0
master[master$days_sinceDose3 > 599, "days_sinceDose2"] <- 0
#Dealing with NA values in columns that have a positive linear relationship with ic50_omicron, meaning we want NA's to be 0
master$days_sinceDose2[is.na(master$days_sinceDose2)] <- 0
master$days_sinceDose3[is.na(master$days_sinceDose3)] <- 0
#Dealing with NA values in columns that have a flat relationship with ic50_omicron, meaning we want NA's to be the mean
master$days_dose23interval[is.na(master$days_dose23interval)] <- mean(master$days_dose23interval, na.rm = TRUE)
master$Sx_severity_most_recent[is.na(master$Sx_severity_most_recent)] <- mean(master$Sx_severity_most_recent, na.rm = TRUE)
master$days_sinceSxLatest[is.na(master$days_sinceSxLatest)] <- mean(master$days_sinceSxLatest, na.rm = TRUE)
master$days_sincePosTest_latest[is.na(master$days_sincePosTest_latest)] <- mean(master$days_sincePosTest_latest, na.rm = TRUE)
################################################################################################
#Plotted different variables to see the relationship (slope) to ic50_omicron
df<-as.data.frame(master)
#In the following line 'x=' was set to different columns to see the relationships each column had with ic50_omicron
ggplot(data = df, aes(x = dose_2, y = ic50_Omicron)) + geom_point() + geom_smooth(method=lm, se=FALSE)
################################################################################################
#Splitting master back into test and train to send over to our model script
train<- (master[master$test == 0])
test<- (master[master$test == 1])
#Dropping our test column used to split after rbind()
drops<- c('test')
train<-train[, !drops, with = FALSE]
test<-test[, !drops, with = FALSE]
fwrite(train,'./project/volume/data/interim/train.csv')
fwrite(test,'./project/volume/data/interim/test.csv')
library(data.table)
library(caret)
library(Metrics)
library(glmnet)
library(plotmo)
library(rpart)
library(rpart.plot)
set.seed(77)
train<-fread('./project/volume/data/interim/train.csv')
test<-fread('./project/volume/data/interim/test.csv')
master_sub<-fread("./project/volume/data/raw/Stat_380_sample_submission.csv")
#Here we are building our regression tree
tree <- rpart(ic50_Omicron~., data = train, control = rpart.control(cp = 0.0001))
#We can see what the tree looks like by plotting it (I did try to add labels but it is a bit too convoluted)
plot(tree)
#save our model
saveRDS(tree, "./project/volume/models/Regression_tree.model")
#predict and form our submission
pred<- predict(tree, newdata = test)
master_sub$ic50_Omicron<-pred
master_sub
View(master_sub)
#now we can write out a submission
fwrite(master_sub,"./project/volume/data/processed/Regression_tree_model.csv")
library(data.table)
library(dplyr)
set.seed(77)
#Read in our data for our tsne + xgboost model to make predictions
test_emb<-fread('./project/volume/data/raw/test_emb.csv')
training_emb<-fread('./project/volume/data/raw/training_emb.csv')
test_file<-fread('./project/volume/data/raw/test_file.csv')
training_data<-fread('./project/volume/data/raw/training_data.csv')
example_sub<-fread('./project/volume/data/raw/examp_sub.csv')
####################################################################
#Combining our 2 test and 2 train files into just 1 test and 1 train
train<-cbind(training_data, training_emb)
train$testtrain<-1
#Change our reddit column to a numerical representation
train$reddit[train$reddit == 'cars'] <- 0
train$reddit[train$reddit == 'CFB'] <- 1
train$reddit[train$reddit == 'Cooking'] <- 2
train$reddit[train$reddit == 'MachineLearning'] <- 3
train$reddit[train$reddit == 'magicTCG'] <- 4
train$reddit[train$reddit == 'politics'] <- 5
train$reddit[train$reddit == 'RealEstate'] <- 6
train$reddit[train$reddit == 'science'] <- 7
train$reddit[train$reddit == 'StockMarket'] <- 8
train$reddit[train$reddit == 'travel'] <- 9
train$reddit[train$reddit == 'videogames'] <- 10
test<-cbind(test_file, test_emb)
test$testtrain<-0
test$reddit<-99
####################################################################
#Combining our test and train files into one master dataset
master<-rbind(train, test, fill=TRUE)
master$id<-1:nrow(master)
#write out our master data and example_sub
fwrite(master,'./project/volume/data/interim/master.csv')
fwrite(example_sub,'./project/volume/data/interim/example_sub.csv')
library(data.table)
library(Rtsne)
library(ggplot2)
library(caret)
library(ClusterR)
set.seed(3)
# load in master data
master<-fread("./project/volume/data/interim/master.csv")
###############################################
#Taking out columns that won't be used for tsne
id<-master$id
master$id<-NULL
testtrain<-master$testtrain
master$testtrain<-NULL
text<-master$text
master$text<-NULL
reddit<-master$reddit
master$reddit<-NULL
#obtain our tsne model with pca = true
tsne<-Rtsne(master,pca = T,perplexity=10,check_duplicates = F)
setwd("~/IAPP/Data-Analytics")
fwrite(data, './UNH_Membership_Project/project/volume/data/interim/cleaned_data.csv')
>>>>>>> Stashed changes
